- name: add key
  ansible.builtin.apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    keyring: /usr/share/keyrings/kubernetes-archive-keyring.gpg
  become: true

- name: add repository
  ansible.builtin.apt_repository:
    # there is no kubernetes-bullseye
    repo: "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
    state: present
    filename: kubernetes
  become: true

- block:
  - name: install
    ansible.builtin.apt:
      state: present
      update_cache: yes
      name: "{{ k8s_packages | product([k8s_version + '-00']) | map('join', '=') }}"

  - name: hold
    ansible.builtin.dpkg_selections:
      name: "{{ item }}"
      selection: hold
    loop: "{{ k8s_packages }}"

  vars:
    k8s_packages:
      - kubeadm
      - kubectl
      - kubelet
  become: true

- name: install pip modules
  ansible.builtin.pip:
    virtualenv: /ansible
    state: present
    name:
      - kubernetes
      - PyYAML
      - jsonpatch
  become: true

- name: make k8s etc directory
  ansible.builtin.file:
    path: /etc/k8s
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  become: true

- block:
  - name: deploy init config
    ansible.builtin.template:
      src: "{{ item }}"
      dest: "/etc/k8s/{{ item.split('.')[0:-1] | join('.') }}"
      backup: no
    loop:
      - kubeadm.init.config.yml.j2
    become: true

  - name: check if a cluster already exists
    kubernetes.core.k8s_cluster_info:
    environment:
      # to avoid kubeadm init failed cause timeout, but complete lately and kubeconfig not copied.
      K8S_AUTH_KUBECONFIG: /etc/kubernetes/admin.conf
    become: true
    register: k8s_cluster_status
    failed_when: no

#  - name: debug
#    ansible.builtin.debug:
#      var: k8s_cluster_status

  - name: initialize cluster
    ansible.builtin.shell: |
      kubeadm init --config=/etc/k8s/kubeadm.init.config.yml
    async: "{{ (60 * 60)|int }}"
    poll: 60
    when: k8s_cluster_status.apis is not defined
    become: true

  - name: make directory
    ansible.builtin.file:
      state: directory
      path: "{{ ansible_env.HOME }}/.kube"

  - name: copy kube-config
    ansible.builtin.copy:
      src: /etc/kubernetes/admin.conf
      dest: "{{ ansible_env.HOME }}/.kube/config"
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: u=rw
      remote_src: yes
    become: true

  - name: chmod kube-config
    ansible.builtin.file:
      path: "{{ ansible_env.HOME }}/.kube/config"
      state: file
      mode: 0600

  - name: get cluster information
    kubernetes.core.k8s_cluster_info:
    register: k8s_cluster_status

  # I don't want to check that if the token(s) already exists or not
  # so, I create the token once.
  - name: create a cluster token
    shell: |
      kubeadm token create
    register: k8s_cluster_token
  when: k8s_control_plane

- name: identify control plane host
  ansible.builtin.set_fact:
    # https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html
    k8s_control_plane_host: "{{ hostvars | to_json | from_json | community.general.json_query(k8s_control_plane_host_query) | first }}"
  vars:
    k8s_control_plane_host_query: "* | [] | [?k8s_control_plane == `true`].inventory_hostname"

- name: get joined nodes from control-plane
  kubernetes.core.k8s_info:
    kind: Node
  delegate_to: "{{ k8s_control_plane_host }}"
  register: k8s_node_list

- name: filter joined nodes by my host name
  ansible.builtin.set_fact:
    # https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html
    k8s_node_joined: "{{ k8s_node_list.resources | to_json | from_json | community.general.json_query(k8s_node_joined_query) }}"
  vars:
    k8s_node_joined_query: "[*].metadata | [?name == `{{ inventory_hostname }}`]"

- block:
  - name: get ca cert hash from control plane
    ansible.builtin.shell: >-
      openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt |
      openssl rsa -pubin -outform der 2>/dev/null |
      openssl dgst -sha256 -hex |
      sed 's/^.* //'
    register: k8s_cluster_ca_cert_hash
    delegate_to: "{{ k8s_control_plane_host }}"

  - name: get necessary facts from control plane
    ansible.builtin.set_fact:
      k8s_cluster_token: "{{ hostvars[k8s_control_plane_host].k8s_cluster_token.stdout }}"
      k8s_cluster_connection_host: "{{ hostvars[k8s_control_plane_host].k8s_cluster_status.connection.host }}"
      k8s_cluster_ca_cert_hash: "{{ k8s_cluster_ca_cert_hash.stdout }}"

  - name: deploy config for join
    ansible.builtin.template:
      src: "{{ item }}"
      dest: "/etc/k8s/{{ item.split('.')[0:-1] | join('.') }}"
      backup: no
    loop:
      - kubeadm.join.config.yml.j2
    become: true
    vars:
      k8s_join_api_server_endpoint: "{{ k8s_cluster_connection_host.split('://') | last }}"
      k8s_join_token: "{{ k8s_cluster_token }}"
      k8s_join_ca_cert_hash: "{{ k8s_cluster_ca_cert_hash }}"

  - name: join to the cluster
    ansible.builtin.shell: >-
      kubeadm join --config=/etc/k8s/kubeadm.join.config.yml
    become: true

  when: not k8s_control_plane and not k8s_node_joined

- block:
  - name: make manifests directory
    ansible.builtin.file:
      state: directory
      path: "{{ k8s_manifests_dir }}"

  - include_tasks: includes/kustomize.yml
    loop: "{{ k8s_manifests }}"
    loop_control:
      loop_var: outer_item

  when: k8s_control_plane
  vars:
    k8s_manifests_dir: /etc/k8s/manifests
    k8s_manifests:
      - src: files/manifests/flannel
        dest: flannel
        template_src: manifests/flannel/net-conf.json.j2
        template_dest: net-conf.json
